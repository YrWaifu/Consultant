from rq import Queue
from redis import Redis
from ..settings import settings


redis = Redis.from_url(settings.REDIS_URL)
queue = Queue("checks", connection=redis)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ML –º–æ–¥–µ–ª–∏
def process_ad_check_task(text: str | None, media_path: str | None):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∫–ª–∞–º—ã —á–µ—Ä–µ–∑ ML –º–æ–¥–µ–ª—å.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–æ—Ä–∫–µ—Ä–∞.
    """
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ML –∑–∞–¥–∞—á–∏. –¢–µ–∫—Å—Ç: {text[:100] if text else 'None'}...")
    
    try:
        from ..services.ml_core import run_ml
        from ..repositories.law_repository import LawRepository  
        from ..db import SessionLocal
        from datetime import datetime, date
        
        print("üìö –ó–∞–ø—É—Å–∫–∞–µ–º ML –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º ML –æ–±—Ä–∞–±–æ—Ç–∫—É
        ml_out = run_ml(text, media_path)
        print(f"‚úÖ ML –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç: {ml_out}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ ML –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        import traceback
        print(f"üìú –ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å: {traceback.format_exc()}")
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        raise e
    
    print("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ML –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á–µ—Ç–∞...")
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–≤–æ–¥ ML –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç—á–µ—Ç–∞
        violations: list[dict] = []
        cases: list[dict] = []

        def format_violation_title(article_str):
            """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç '–ß–∞—Å—Ç—å X. –ü—É–Ω–∫—Ç Y' –≤ '–ø.Y —á.X —Å—Ç.5 –§–ó –æ —Ä–µ–∫–ª–∞–º–µ'"""
            import re
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞ "–ß–∞—Å—Ç—å 5. –ü—É–Ω–∫—Ç 1"
            match = re.match(r'–ß–∞—Å—Ç—å (\d+(?:\.\d+)?)\. –ü—É–Ω–∫—Ç (\d+)', article_str)
            if match:
                part = match.group(1)
                point = match.group(2)
                return f"–ø.{point} —á.{part} —Å—Ç.5 –§–ó –æ —Ä–µ–∫–ª–∞–º–µ"
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "–ß–∞—Å—Ç—å 6" (–±–µ–∑ –ø—É–Ω–∫—Ç–∞)
            match = re.match(r'–ß–∞—Å—Ç—å (\d+(?:\.\d+)?)$', article_str)
            if match:
                part = match.group(1)
                return f"—á.{part} —Å—Ç.5 –§–ó –æ —Ä–µ–∫–ª–∞–º–µ"
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "–ß–∞—Å—Ç–∏ 10.1 –∏ 10.2"
            if "–ß–∞—Å—Ç–∏" in article_str and "–∏" in article_str:
                return f"{article_str} —Å—Ç.5 –§–ó –æ —Ä–µ–∫–ª–∞–º–µ"
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
            return article_str
        
        for item in ml_out.get("text", []) or []:
            for article, info in item.items():
                law_article_id = "art-5"
                formatted_title = format_violation_title(str(article))
                violations.append({
                    "severity": "critical",
                    "title": formatted_title,
                    "text": info.get("text") or "",
                    "fix": info.get("recommendations") or "",
                    "link": f"/v2/laws/article/{law_article_id}",
                })
                jp = info.get("judicial_proceedings") or {}
                for case_title, case_text in jp.items():
                    cases.append({
                        "title": case_title,
                        "text": case_text,
                        "fix": info.get("recommendations") or "",
                    })

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(violations)}, –∫–µ–π—Å–æ–≤: {len(cases)}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        has_violations = len(violations) > 0
        percent = 100
        footer = None if not has_violations else ""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞—Ä—É—à–µ–Ω–∏–π
        violations_count = len(violations)
        if violations_count == 1:
            violations_text = f"–í—ã—è–≤–ª–µ–Ω–æ {violations_count} –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –§–ó ¬´–û —Ä–µ–∫–ª–∞–º–µ¬ª"
        elif 2 <= violations_count <= 4:
            violations_text = f"–í—ã—è–≤–ª–µ–Ω–æ {violations_count} –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –§–ó ¬´–û —Ä–µ–∫–ª–∞–º–µ¬ª"
        else:
            violations_text = f"–í—ã—è–≤–ª–µ–Ω–æ {violations_count} –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –§–ó ¬´–û —Ä–µ–∫–ª–∞–º–µ¬ª"
        
        flags = (
            [
                {"type": "ok", "text": "–ù–µ—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –§–ó ¬´–û —Ä–µ–∫–ª–∞–º–µ¬ª", "strong": True},
                {"type": "ok", "text": "–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π —Ä–∏—Å–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", "strong": False},
                {"type": "ok", "text": "–†–∏—Å–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞–ª", "strong": False},
            ]
            if not has_violations
            else [
                {"type": "warn", "text": violations_text, "strong": True},
                {"type": "warn", "text": "–í —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Å–ª—É—á–∞–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "strong": True},
                {"type": "warn", "text": "–ï—Å—Ç—å —Ä–∏—Å–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "strong": False},
            ]
        )

        ring_color = "#ef4444" if has_violations else "#22c55e"
        ring_deg = 360.0
        ring_label = "–ù–µ—Ç" if has_violations else "–î–∞" 
        check_date = datetime.now()

        print("üóÉÔ∏è –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–æ–Ω–µ –∏–∑ –ë–î...")
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–æ–Ω–µ
        db = SessionLocal()
        repo = LawRepository(db)
        try:
            law_version = repo.get_active_version("38-FZ")
            if law_version:
                law_name = law_version.law_name
                law_version_date = law_version.version_date
            else:
                law_name = "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω \"–û —Ä–µ–∫–ª–∞–º–µ\" –æ—Ç 13.03.2006 N 38-–§–ó (–ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–¥–∞–∫—Ü–∏—è)"
                law_version_date = date(2024, 10, 1)
        finally:
            db.close()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è JSON —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        check_date_str = check_date.strftime('%d.%m.%Y –≤ %H:%M')
        check_date_short = check_date.strftime('%d.%m.%Y')
        
        result = {
            "percent": percent,
            "ring_color": ring_color,
            "ring_deg": ring_deg,
            "ring_label": ring_label,
            "is_ok": (not has_violations),
            "violations": violations,
            "marked_violations": [],
            "flags": flags,
            "cases": cases,
            "footer_note": footer,
            "check_date_formatted": check_date_str,  # –£–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
            "check_date_short": check_date_short,    # –ö–æ—Ä–æ—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            "law_name": law_name,
            "law_version_date": law_version_date.isoformat() if hasattr(law_version_date, 'isoformat') else str(law_version_date),
            "input_text": text,  # –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã
        }
        
        print("üéâ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üîç –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {[(k, type(v).__name__) for k, v in result.items()]}")
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        import traceback
        print(f"üìú –ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å: {traceback.format_exc()}")
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        raise e

