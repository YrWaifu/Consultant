from rq import Worker
from .queue import redis  # —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä Redis —Å —Ç–≤–æ–µ–≥–æ REDIS_URL
from .scheduler import setup_daily_tasks
from ..services.law_parser import parse_and_save_law
from ..models import LawVersion
from ..db import SessionLocal

if __name__ == "__main__":
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
    setup_daily_tasks()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, –µ—Å–ª–∏ –Ω–µ—Ç - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–∫–æ–Ω–∞ –≤ –ë–î...")
    import time
    
    # Retry: –∂–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î (–¥–æ 30 —Å–µ–∫)
    for attempt in range(10):
        try:
            db = SessionLocal()
            law_exists = db.query(LawVersion).filter_by(law_code="38-FZ", is_active=True).first()
            
            if not law_exists:
                print("üìö –ó–∞–∫–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∑–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–≤–∏—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...")
                parse_and_save_law()
                print("‚úÖ –ü–µ—Ä–≤–∏—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!")
            else:
                print(f"‚úÖ –ó–∞–∫–æ–Ω –Ω–∞–π–¥–µ–Ω –≤ –ë–î (–≤–µ—Ä—Å–∏—è –æ—Ç {law_exists.version_date})")
            
            db.close()
            break  # –£—Å–ø–µ—à–Ω–æ - –≤—ã—Ö–æ–¥–∏–º
            
        except Exception as e:
            if attempt < 9:
                print(f"‚è≥ –ë–î –Ω–µ –≥–æ—Ç–æ–≤–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫... ({attempt + 1}/10)")
                time.sleep(3)
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}")
                break
    
    print("üöÄ –ó–∞–ø—É—Å–∫ RQ Worker...")
    Worker(["checks"], connection=redis).work(with_scheduler=True)