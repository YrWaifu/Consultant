#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º (–º–∏–≥—Ä–∞—Ü–∏–∏, –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–æ–Ω–æ–≤, —Ç–µ—Å—Ç—ã).

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py db migrate    - —Å–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
    python manage.py db upgrade    - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
    python manage.py db downgrade  - –æ—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
    python manage.py parse-law     - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –∑–∞–∫–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é
"""
import sys
import subprocess
from pathlib import Path


def run_alembic(command: str, *args):
    """–ó–∞–ø—É—Å–∫ Alembic –∫–æ–º–∞–Ω–¥"""
    cmd = ["alembic", command, *args]
    print(f"üîß –í—ã–ø–æ–ª–Ω—è—é: {' '.join(cmd)}")
    subprocess.run(cmd, check=True)


def main():
    if len(sys.argv) < 2:
        print(__doc__)
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "db":
        if len(sys.argv) < 3:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python manage.py db [migrate|upgrade|downgrade|current]")
            sys.exit(1)
        
        subcommand = sys.argv[2]
        
        if subcommand == "migrate":
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é
            message = sys.argv[3] if len(sys.argv) > 3 else "auto migration"
            run_alembic("revision", "--autogenerate", "-m", message)
        
        elif subcommand == "upgrade":
            # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
            revision = sys.argv[3] if len(sys.argv) > 3 else "head"
            run_alembic("upgrade", revision)
        
        elif subcommand == "downgrade":
            # –û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
            revision = sys.argv[3] if len(sys.argv) > 3 else "-1"
            run_alembic("downgrade", revision)
        
        elif subcommand == "current":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ë–î
            run_alembic("current")
        
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: db {subcommand}")
            sys.exit(1)
    
    elif command == "parse-law":
        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–∫–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é
        print("üîç –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä –∑–∞–∫–æ–Ω–∞...")
        from backend.app.services.law_parser import parse_and_save_law
        parse_and_save_law()
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print(__doc__)
        sys.exit(1)


if __name__ == "__main__":
    main()

